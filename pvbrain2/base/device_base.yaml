# Updated : 2025.01.31
# Version : 1.0.4
# GitHub  : https://github.com/SeByDocKy/pvbrain2

substitutions:
  my_second: '59'
  my_minute: '59'
  my_hours: '23'
  uart_hub_bus: 'spi'    # 'i2c' or 'spi'  go into pvbrain2/base/device_base.yaml to select I2C or SPI UART Hub file
                         # If SPI selected, don't forget to jump/solder the two pairs of pin together located back of WK2168 boards  
  spi_data_rate: '4Mhz'
  i2c_data_rate: '100kHz'

packages:
  # BUS
  bus_i2c0: !include device_bus_i2c0.yaml
  bus_spi1: !include device_bus_spi1.yaml
  bus_one_wire: !include device_bus_one_wire.yaml

  # Devices
  device_sx1509: !include device_sx1509.yaml
  device_uart_esp: !include device_uart_esp.yaml
  device_wk2168_spi: !include device_wk2168_spi.yaml
  # device_out_board_led_strip: !include device_out_board_led_strip.yaml
  # device_wk2132_i2c: !include device_wk2132_i2c.yaml
  # device_wk2132_spi: !include device_wk2132_spi.yaml
  # device_wk2168_i2c: !include device_wk2168_i2c.yaml
  # device_wk2168_addon_spi: !include device_wk2168_addon_spi.yaml
  # device_canbus_node1: !include device_canbus_esp32can.yaml
  # device_canbus_node2: !include device_canbus_mcp2515.yaml

time:
  # https://esphome.io/components/time/homeassistant
  # https://esphome.io/components/time/sntp
  - platform: homeassistant # sntp
    id: my_time

binary_sensor:
# https://esphome.io/components/binary_sensor/status  
  - platform: status
    name: ${name}_status
    id: esp32_status

light:
# https://esphome.io/components/light/status_led
  - platform: status_led
    name: ${name}_led_light_1
    id: led_light_1
    pin: GPIO01
    effects: !include
      file: ../environmental/light/effects/monochrome.yaml
    entity_category: config

  - platform: status_led
    name: ${name}_led_light_2
    id: led_light_2
    pin: GPIO02    
    effects: !include
      file: ../environmental/light/effects/monochrome.yaml
    entity_category: config

# https://esphome.io/components/light/esp32_rmt_led_strip
  - platform: esp32_rmt_led_strip
    name: ${name}_on_board_light_io48
    id: on_board_light_io48
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    # rmt_channel: 0
    chipset: ws2812
    default_transition_length: 0ms
    effects: !include
      file: ../environmental/light/effects/addressable_monoled.yaml
    entity_category: config

button:
# https://esphome.io/components/switch/restart
  - platform: restart
    name: ${name}_restart
    id: esp32_restart    

# https://esphome.io/components/switch/safe_mode
  - platform: safe_mode
    name: ${name}_safe_mode
    id: esp32_safe_mode

# https://esphome.io/components/switch/shutdown
  - platform: shutdown
    name: ${name}_shutdown
    id: esp32_shutdown

sensor:
# https://esphome.io/components/sensor/wifi_signal 
  - platform: wifi_signal
    name: ${name}_wifi_power
    id: esp32_wifi_power
    update_interval: 30s
    entity_category: diagnostic

  # Reports the WiFi signal strength in %
  - platform: template
    name: ${name}_wifi_power_percent
    id: wifi_power_percent
    update_interval: 30s
    unit_of_measurement: '%'
    icon: mdi:wifi
    entity_category: diagnostic
    accuracy_decimals: 0
    lambda: |-
      float wifi_power_dbm = id(esp32_wifi_power).state;
      return min(max(2 * (wifi_power_dbm + 100.0), 0.0), 100.0);

# https://esphome.io/components/sensor/internal_temperature
  - platform: internal_temperature
    name: ${name}_internal_temperature
    id: esp32_internal_temperature
    update_interval: 10s
    entity_category: diagnostic

# https://esphome.io/components/sensor/uptime
  - platform: uptime
    id: esp32_uptime_sec
    update_interval: 10s
    internal: true

text_sensor:
# https://esphome.io/components/text_sensor/wifi_info
  - platform: wifi_info
    ip_address:
      name: ${name}_ip_address
      id: esp32_ip_address
    ssid:
      name: ${name}_connected_ssid
      id: esp32_connected_ssid
    bssid:
      name: ${name}_connected_bssid
      id: esp32_connected_bssid
    mac_address:
      name: ${name}_mac_wifi_address
      id: esp32_mac_wifi_address
    scan_results:
      name: ${name}_latest_scan_results
      id: esp32_latest_scan_results
    dns_address:
      name: ${name}_dns_address
      id: esp32_dns_address

# https://esphome.io/components/text_sensor/version
  - platform: version
    name: ${name}_esphomelib_version
    id: esp32_esphomelib_version
    hide_timestamp: false #true
    entity_category: diagnostic

  - platform: template
    name: ${name}_uptime
    id: esp32_uptime
    update_interval: 10s
    icon: mdi:clock-start
    entity_category: diagnostic
    lambda: |-
      int uptime_sec = id(esp32_uptime_sec).state;
      int days = uptime_sec / 86400;
      int hours = (uptime_sec % 86400) / 3600;
      int minutes = (uptime_sec % 3600) / 60;
      int seconds = uptime_sec % 60;
      return {
        (
          (days ? std::to_string(days) +"d " : "") +
          (hours ? std::to_string(hours) +"h " : "") +
          (minutes ? std::to_string(minutes) +"m " : "") +
          (std::to_string(seconds) +"s")
        ).c_str()
      };
