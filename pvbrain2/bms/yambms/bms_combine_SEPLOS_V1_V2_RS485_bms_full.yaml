# Updated : 2025.01.16
# Version : 1.1.2
# GitHub  : https://github.com/syssi/esphome-seplos-bms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

substitutions:
  bms_model: "Seplos V1 V2"
  bms_protocol: "RS485"

packages:
  bms_base: !include bms_base.yaml
  bms_combine: !include bms_combine.yaml
  bms_temperature_sensor: !include bms_temperature_sensor_4.yaml

# +--------------------------------------+
# | Component settings                   |
# +--------------------------------------+

external_components:
  - source: github://syssi/esphome-seplos-bms@main
    refresh: 0s

seplos_bms:
  - id: seplos_bms${bms_id}
    address: ${bms_address}
    protocol_version: ${bms_protocol_version}
    seplos_modbus_id: ${seplos_modbus_id}
    update_interval: ${bms_update_interval}

# +--------------------------------------+
# | Component entities                   |
# +--------------------------------------+

sensor:
  - platform: seplos_bms
    seplos_bms_id: seplos_bms${bms_id}
    min_cell_voltage:
      id: bms${bms_id}_min_cell_voltage
      name: "${name} ${bms_name} min cell voltage"
    max_cell_voltage:
      id: bms${bms_id}_max_cell_voltage
      name: "${name} ${bms_name} max cell voltage"
    min_voltage_cell:
      id: bms${bms_id}_min_voltage_cell
      name: "${name} ${bms_name} min voltage cell"
    max_voltage_cell:
      id: bms${bms_id}_max_voltage_cell
      name: "${name} ${bms_name} max voltage cell"
    delta_cell_voltage:
      name: "${name} ${bms_name} delta cell voltage"
    average_cell_voltage:
      id: bms${bms_id}_average_cell_voltage
      name: "${name} ${bms_name} average cell voltage"
    cell_voltage_1:
      name: "${name} ${bms_name} cell voltage 01"
    cell_voltage_2:
      name: "${name} ${bms_name} cell voltage 02"
    cell_voltage_3:
      name: "${name} ${bms_name} cell voltage 03"
    cell_voltage_4:
      name: "${name} ${bms_name} cell voltage 04"
    cell_voltage_5:
      name: "${name} ${bms_name} cell voltage 05"
    cell_voltage_6:
      name: "${name} ${bms_name} cell voltage 06"
    cell_voltage_7:
      name: "${name} ${bms_name} cell voltage 07"
    cell_voltage_8:
      name: "${name} ${bms_name} cell voltage 08"
    cell_voltage_9:
      name: "${name} ${bms_name} cell voltage 09"
    cell_voltage_10:
      name: "${name} ${bms_name} cell voltage 10"
    cell_voltage_11:
      name: "${name} ${bms_name} cell voltage 11"
    cell_voltage_12:
      name: "${name} ${bms_name} cell voltage 12"
    cell_voltage_13:
      name: "${name} ${bms_name} cell voltage 13"
    cell_voltage_14:
      name: "${name} ${bms_name} cell voltage 14"
    cell_voltage_15:
      name: "${name} ${bms_name} cell voltage 15"
    cell_voltage_16:
      name: "${name} ${bms_name} cell voltage 16"
    temperature_1:
      id: bms${bms_id}_temperature_sensor_1
      name: "${name} ${bms_name} temperature 1"
    temperature_2:
      id: bms${bms_id}_temperature_sensor_2
      name: "${name} ${bms_name} temperature 2"
    temperature_3:
      id: bms${bms_id}_temperature_sensor_3
      name: "${name} ${bms_name} temperature 3"
    temperature_4:
      id: bms${bms_id}_temperature_sensor_4
      name: "${name} ${bms_name} temperature 4"
    temperature_5:
      name: "${name} ${bms_name} environment temperature"
    temperature_6:
      name: "${name} ${bms_name} mosfet temperature"
    total_voltage:
      id: bms${bms_id}_total_voltage
      name: "${name} ${bms_name} total voltage"
    current:
      id: bms${bms_id}_current
      name: "${name} ${bms_name} current"
    power:
      id: bms${bms_id}_power
      name: "${name} ${bms_name} power"
    charging_power:
      id: bms${bms_id}_charging_power
      name: "${name} ${bms_name} charging power"
    discharging_power:
      id: bms${bms_id}_discharging_power
      name: "${name} ${bms_name} discharging power"
    residual_capacity:
      id: bms${bms_id}_capacity_remaining_ah
      name: "${name} ${bms_name} residual capacity"
    battery_capacity:
      id: bms${bms_id}_battery_capacity
      name: "${name} ${bms_name} battery capacity"
    rated_capacity:
      name: "${name} ${bms_name} rated capacity"
    state_of_charge:
      id: bms${bms_id}_state_of_charge
      name: "${name} ${bms_name} state of charge"
    charging_cycles:
      id: bms${bms_id}_charging_cycles
      name: "${name} ${bms_name} charging cycles"
    state_of_health:
      name: "${name} ${bms_name} state of health"
    port_voltage:
      name: "${name} ${bms_name} port voltage"
  # Required sensors cannot be retrieved from BMS
  # max_charge_current
  - platform: template
    id: bms${bms_id}_max_charge_current
    name: "${name} ${bms_name} max charge current"
    update_interval: ${bms_update_interval}
    accuracy_decimals: 0
    unit_of_measurement: A
    icon: mdi:current-dc
    filters:
      - or:
        - throttle: 10s
        - delta: 1
    lambda: return ${bms_max_charge_current};
  # max_discharge_current
  - platform: template
    id: bms${bms_id}_max_discharge_current
    name: "${name} ${bms_name} max discharge current"
    update_interval: ${bms_update_interval}
    accuracy_decimals: 0
    unit_of_measurement: A
    icon: mdi:current-dc
    filters:
      - or:
        - throttle: 10s
        - delta: 1
    lambda: return ${bms_max_discharge_current};
  # cell_ovp
  - platform: template
    id: bms${bms_id}_cell_ovp
    name: "${name} ${bms_name} cell ovp"
    update_interval: ${bms_update_interval}
    accuracy_decimals: 3
    unit_of_measurement: V
    device_class: voltage
    filters:
      - or:
        - throttle: 10s
        - delta: 0.001
    lambda: return ${bms_cell_ovp};
  # cell_uvp
  - platform: template
    id: bms${bms_id}_cell_uvp
    name: "${name} ${bms_name} cell uvp"
    update_interval: ${bms_update_interval}
    accuracy_decimals: 3
    unit_of_measurement: V
    device_class: voltage
    filters:
      - or:
        - throttle: 10s
        - delta: 0.001
    lambda: return ${bms_cell_uvp};
  # balance_trigger_voltage
  - platform: template
    id: bms${bms_id}_balance_trigger_voltage
    name: "${name} ${bms_name} balance trigger voltage"
    update_interval: ${bms_update_interval}
    accuracy_decimals: 3
    unit_of_measurement: V
    device_class: voltage
    filters:
      - or:
        - throttle: 10s
        - delta: 0.001
    lambda: return ${bms_balance_trigger_voltage};
  # FAKE errors_bitmask
  # Alarm management is not supported at this time
  # Internal : only specifying an id without a name will implicitly set this to true.
  - platform: template
    id: bms${bms_id}_yambms_errors_bitmask
    update_interval: ${bms_update_interval}
    accuracy_decimals: 0
    icon: mdi:alert-circle-outline
    filters:
      - or:
        - throttle: 10s
        - delta: 1
    lambda: return 0;

binary_sensor:
  # Required sensors cannot be retrieved from BMS
  # online_status
  - platform: template
    id: bms${bms_id}_online_status
    name: "${name} ${bms_name} online status"
    lambda: |-
      if (id(bms${bms_id}_total_voltage).state > 0)
        return true;
      else
        return false;
  # equalizing
  - platform: template
    id: bms${bms_id}_equalizing
    name: "${name} ${bms_name} balancing"
    lambda: return false;
  # bms_switch_charging
  - platform: template
    id: bms${bms_id}_charging_allowed
    name: "${name} ${bms_name} charging"
    lambda: return true;
  # bms_switch_discharging
  - platform: template
    id: bms${bms_id}_discharging_allowed
    name: "${name} ${bms_name} discharging"
    lambda: return true;
