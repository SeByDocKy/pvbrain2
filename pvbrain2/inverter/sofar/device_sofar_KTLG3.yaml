modbus_controller:
  - id: ${inverter_name}_modbus_controller
    address: ${inverter_modbus_address}
    modbus_id: ${inverter_modbus_id}
    command_throttle: ${inverter_modbus_throttle}
    # offline_skip_updates: ${inverter_modbus_offline_skip_updates}
    setup_priority: -20
    update_interval: ${inverter_update_interval}
    
globals:  
  - id: ${inverter_name}_pv_energy_yesterday_global
    type: float
    restore_value: yes    
  - id: ${inverter_name}_ac_output_energy_yesterday_global
    type: float
    restore_value: yes

time:
  - platform: homeassistant #sntp
    id: !extend my_time
    on_time:
      - seconds: ${my_second}
        minutes: ${my_minute}
        hours: ${my_hours}
        then:           
          - globals.set:
              id: ${inverter_name}_pv_energy_yesterday_global
              value: !lambda return ( id(${inverter_name}_pv_energy_yesterday_global) =  float( id(${inverter_name}_pv_energy_today).state) );                    
          - globals.set:
              id: ${inverter_name}_ac_output_energy_yesterday_global
              value: !lambda return ( id(${inverter_name}_ac_output_energy_yesterday_global) =  float( id(${inverter_name}_ac_output_energy_today).state) );
    
text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_state
    id: ${inverter_name}_state
    address: 0x0000
    response_size: 2
    register_type: holding
    icon: 'mdi:information-outline'
    raw_encode: HEXBYTES
    lambda: |-
      // auto z = "Unknown";
      char value = data[item->offset+1];
      switch (value) {
        case 0: return std::string("Waiting");
        case 1: return std::string("Check");
        case 2: return std::string("Normal");
        case 3: return std::string("Fault");
        case 4: return std::string("Permanent");
        default: return std::string("Unknown");
      }
      return x;
      
select:
      
  - platform: template
    name: ${name}_${inverter_name}_ct_antireflux_mode
    id: ${inverter_name}_ct_antireflux_power_mode
    options:
      - "CT enable"
      - "CT disable"
    optimistic: True
    restore_value: True    
    initial_option: "CT enable"
    on_value: 
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(${inverter_name}_modbus_controller);
          std::vector<uint8_t> cmd_data(7);
          if (i == 0) { 
            cmd_data ={${inverter_modbus_address},0x56,0x90,0x07,0x55,0x00,0x00};
            ESP_LOGVV("CT antireflux enabled");
          }
          if (i == 1) {
            cmd_data ={${inverter_modbus_address},0x56,0x90,0x07,0xAA,0x00,0x00};
            ESP_LOGVV("CT antireflux disabled");
          }
          auto write_cmd = esphome::modbus_controller::ModbusCommandItem::create_custom_command(controller, cmd_data, nullptr);        
          delay(200);
          controller->queue_command(write_cmd);
          delay(200);
       
binary_sensor:

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ct_enabled
    id: ${inverter_name}_ct_enabled
    register_type: holding
    address: 0x002E
    bitmask: 0x0002   #bits 15-3 power, bits 2-1 <=> 0 disable, 1 Reflux CT mode, 2 Reflux eMeter mode, 3 Reflux ARPC mode
    icon: 'mdi:tape-measure'
      
sensor:

    ################################# PV  ####################""
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_voltage
    id: ${inverter_name}_pv_voltage
    register_type: holding
    address: 0x0006
    unit_of_measurement: 'V'
    state_class: 'measurement'
    device_class: 'voltage'
    icon: 'mdi:sine-wave'
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
 
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_current
    id: ${inverter_name}_pv_current
    register_type: holding
    address: 0x0007
    unit_of_measurement: 'A'
    state_class: 'measurement'
    device_class: 'current'
    icon: 'mdi:current-dc'
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 3  
 
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_power
    id: ${inverter_name}_pv_power
    register_type: holding
    address: 0x000A
    unit_of_measurement: 'W'
    accuracy_decimals: 1
    state_class: 'measurement'
    device_class: 'power'
    icon: 'mdi:solar-power'
    value_type: U_WORD
    filters:
      - multiply: 10
      - clamp:
          min_value: 0
          max_value: 2200
          ignore_out_of_range: true
    register_count: 2      

  - platform: total_daily_energy
    name: ${name}_${inverter_name}_pv_energy_today
    id: ${inverter_name}_pv_energy_today
    power_id: ${inverter_name}_pv_power
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1   
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter    
      
  - platform: template
    name: ${name}_${inverter_name}_pv_energy_yesterday
    id: ${inverter_name}_pv_energy_yesterday
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:counter
    update_interval: ${inverter_template_update}
    lambda: |-
      return ( id(${inverter_name}_pv_energy_yesterday).state = id(${inverter_name}_pv_energy_yesterday_global) );  
     
      
########## Output Grid Data  #########

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_power
    id: ${inverter_name}_ac_output_power
    register_type: holding
    address: 0x000C
    unit_of_measurement: 'W'
    accuracy_decimals: 1
    state_class: 'measurement'
    device_class: 'power'
    icon: mdi:power
    value_type: U_WORD
    filters:
      - multiply: 10
 
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_reactive_power
    id: ${inverter_name}_ac_output_reactive_power
    register_type: holding
    address: 0x000D 
    unit_of_measurement: 'kVar'
    accuracy_decimals: 1
    state_class: 'measurement'
    icon: mdi:math-cos
    value_type: S_WORD
    filters:
      - multiply: 10
           
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_frequency
    id: ${inverter_name}_ac_output_frequency
    register_type: holding
    address: 0x000E                
    unit_of_measurement: 'Hz'
    state_class: 'measurement'
    icon: mdi:sine-wave
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
     
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_voltage
    id: ${inverter_name}_ac_output_voltage
    register_type: holding
    address: 0x000F
    unit_of_measurement: 'V'
    state_class: 'measurement'
    device_class: 'voltage'
    icon: mdi:sine-wave
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
 
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_current
    id: ${inverter_name}_ac_output_current
    register_type: holding
    address: 0x0010
    unit_of_measurement: 'A'
    state_class: 'measurement'
    device_class: 'current'
    icon: mdi:current-ac
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 5  
      
   ########## Inverter statistics ######

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_energy_total
    id: ${inverter_name}_ac_output_energy_total
    register_type: holding
    address: 0x0015   
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    device_class: 'energy'
    state_class: 'total_increasing'
    icon: mdi:counter
    value_type: U_DWORD
    register_count: 2
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_energy_total_duration
    id: ${inverter_name}_ac_output_energy_total_duration
    register_type: holding
    address: 0x0017
    unit_of_measurement: 'min'
    icon: mdi:timeline-clock
    value_type: U_DWORD
    register_count: 3
    
  # - platform: modbus_controller
    # modbus_controller_id: ${inverter_name}_modbus_controller
    # name: ${name}_${inverter_name}_ac_output_energy_today
    # id: ${inverter_name}_ac_output_energy_today
    # register_type: holding
    # address: 0x0019
    # unit_of_measurement: 'kWh'
    # state_class: 'measurement'
    # device_class: 'energy'
    # icon: mdi:counter
    # value_type: U_WORD
    # accuracy_decimals: 1
    # filters:
      # - multiply: 0.01

  - platform: total_daily_energy
    name: ${name}_${inverter_name}_ac_output_energy_today
    id: ${inverter_name}_ac_output_energy_today
    power_id: ${inverter_name}_ac_output_power
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1   
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter      
      
  - platform: template
    name: ${name}_${inverter_name}_ac_output_energy_yesterday
    id: ${inverter_name}_ac_output_energy_yesterday
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:counter
    update_interval: ${inverter_template_update}
    lambda: |-
      return ( id(${inverter_name}_ac_output_energy_yesterday).state = id(${inverter_name}_ac_output_energy_yesterday_global) );    
     
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_ac_output_energy_today_duration
    id: ${inverter_name}_ac_output_energy_today_duration
    register_type: holding
    address: 0x001A
    unit_of_measurement: 'min'
    icon: mdi:timeline-clock
    value_type: U_WORD 
      
  ########## Inverter inner sensors #########

  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_inverter_temperature
    id: ${inverter_name}_inverter_temperature
    register_type: holding
    address: 0x001B
    unit_of_measurement: '°C'
    accuracy_decimals: 1
    state_class: 'measurement'
    device_class: 'temperature'
    icon: mdi:thermometer
    value_type: U_WORD
      
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_mosfet_temperature
    id: ${inverter_name}_mosfet_temperature
    register_type: holding
    address: 0x001C
    unit_of_measurement: '°C'
    accuracy_decimals: 1
    state_class: 'measurement'
    device_class: 'temperature'
    icon: mdi:thermometer
    value_type: U_WORD
   
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_bus_voltage
    id: ${inverter_name}_bus_voltage
    register_type: holding
    address: 0x001D     
    unit_of_measurement: 'V'
    state_class: 'measurement'
    device_class: 'voltage'
    icon: mdi:sine-wave
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    register_count: 7  
   
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_pv_isolation_resistance
    id: ${inverter_name}_pv_isolation_resistance
    register_type: holding
    address: 0x0024
    unit_of_measurement: 'Ohm'
    accuracy_decimals: 1
    state_class: 'measurement'
    icon: mdi:omega
    value_type: U_WORD
    register_count: 4
    
    
    
 ############################ CT readings anti-reflux #############
 
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_sign_ct_current
    id: ${inverter_name}_sign_ct_current
    register_type: holding
    address: 0x0028
    bitmask: 0x8000
    icon: 'mdi:numeric'
    value_type: U_WORD
    accuracy_decimals: 0
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_raw_ct_current
    id: ${inverter_name}_raw_ct_current
    register_type: holding
    address: 0x0028
    bitmask: 0x7FFF
    unit_of_measurement: 'A'
    state_class: 'measurement'
    device_class: 'current'
    icon: 'mdi:current-dc'
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
      
  - platform: template
    name: ${name}_${inverter_name}_ct_current
    id: ${inverter_name}_ct_current
    unit_of_measurement: 'A'
    accuracy_decimals: 2
    state_class: 'measurement'
    device_class: 'current'
    icon: 'mdi:current-dc'
    update_interval: ${inverter_template_update}
    lambda: |-
      return ( ((1.0f - (id(${inverter_name}_sign_ct_current).state)) * (id(${inverter_name}_raw_ct_current).state)) - ((id(${inverter_name}_sign_ct_current).state) * (id(${inverter_name}_raw_ct_current).state)));


  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_sign_ct_power
    id: ${inverter_name}_sign_ct_power
    register_type: holding
    address: 0x0029
    bitmask: 0x8000
    icon: 'mdi:numeric'
    value_type: U_WORD
    accuracy_decimals: 0
    
  - platform: modbus_controller
    modbus_controller_id: ${inverter_name}_modbus_controller
    name: ${name}_${inverter_name}_raw_ct_power
    id: ${inverter_name}_raw_ct_power
    register_type: holding
    address: 0x0029
    bitmask: 0x7FFF
    unit_of_measurement: 'W'
    state_class: 'measurement'
    device_class: 'power'
    icon: 'mdi:power'
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 10
      
  - platform: template
    name: ${name}_${inverter_name}_ct_power
    id: ${inverter_name}_ct_power
    unit_of_measurement: 'W'
    accuracy_decimals: 1
    state_class: 'measurement'
    device_class: 'power'
    icon: 'mdi:solar-power'
    update_interval: ${inverter_template_update}
    lambda: |-
      return ( ((1.0f - id(${inverter_name}_sign_ct_power).state) * id(${inverter_name}_raw_ct_power).state) - (id(${inverter_name}_sign_ct_power).state * id(${inverter_name}_raw_ct_power).state));
      
  # - platform: modbus_controller
    # modbus_controller_id: ${inverter_name}_modbus_controller
    # name: ${name}_${inverter_name}_ct_antireflux_power
    # id: ${inverter_name}_ct_antireflux_power
    # register_type: holding
    # address: 0x002E
    # # bitmask: 0xFFF8   #bits 15-3 power, bits 2-1 <=> 0 disable, 1 Reflux CT mode, 2 Reflux eMeter mode, 3 Reflux ARPC mode
    # unit_of_measurement: 'W'
    # accuracy_decimals: 1
    # state_class: 'measurement'
    # device_class: 'power'
    # icon: 'mdi:transmission-tower-export'
    # value_type: U_WORD
    # filters:
      # - multiply: 10     
       