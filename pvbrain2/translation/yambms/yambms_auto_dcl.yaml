# Updated : 2025.01.25
# Version : 1.2.3
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

substitutions:
  # +--------------------------------------+
  # | Use the settings below with caution  |
  # +--------------------------------------+
  # Auto discharge current control will automatically reduce the charging current as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  # If unsure, leave the below settings as default, this will ensure discharge current will taper correctly.
  # Factor to control the end of the discharge current curve. A setting below 2 will extend the curve, above 2 will shorten the curve. 
  discharge_a_factor_curve_end: "2.0"
  # Factor to adjust the shape of the charge current curve.
  # A setting below 1 will reduce current at a slow rate after the float voltage is reached, then increase as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  # A factor above 1 will reduce current at a fast rate after the float voltage is reached, then slow as a cell reaches the BMS "cell_voltage_undervoltage_recovery".
  discharge_a_factor_curve_shape: "1.8"
  # Discharge knee voltage, the point at which a cell will reduce in voltage more rapidly. For LiFePO4 cells, this is generally considered to be 3.1v.
  discharge_knee_v: "3.1"

switch:
  - platform: template
    name: ${name} ${yambms_name} Automatic Discharge Current
    id: ${yambms_id}_switch_auto_dcl
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: config

sensor:
  # +--------------------------------------+
  # | Auto Discharge Current Limit         |
  # +--------------------------------------+
  # First, an initial discharge current is calculated based upon the minimum cell voltage but only if the Auto Discharge Current switch is enabled.
  - platform: copy
    source_id: ${yambms_id}_min_cell_voltage
    name: ${name} ${yambms_name} Initial Discharge Current
    id: auto_dcl_initial
    unit_of_measurement: A
    device_class: current
    internal: true  
    filters:
    - lambda: !lambda |-
              // Variables
              double max_discharge_a = id(${yambms_id}_max_discharge_current).state;
              double cell_low_v = id(${yambms_id}_cell_uvp).state + 0.2;

              // Auto Discharge Current function
              if (!id(${yambms_id}_switch_auto_dcl).state) {
                // No change to discharge current required
                return 0.0;
              } else if (id(${yambms_id}_min_cell_voltage).state < cell_low_v) {
                // Set DCL delta to maximum as min cell voltage too low
                return -max_discharge_a;
              } else {
                // Set DCL delta to automatic value
                return max(0.0,(- pow(${discharge_a_factor_curve_end}, pow( max(0.0, ((x - ${discharge_knee_v}) / (cell_low_v - ${discharge_knee_v}))),${discharge_a_factor_curve_shape}))+2) * max_discharge_a)
                - max_discharge_a;
              }
              
  # Second, an exponential moving average is calculated. This will be used to smooth the transition between different initial discharge current values.
  - platform: copy
    source_id: auto_dcl_initial
    name: ${name} ${yambms_name} Moving Average Discharge Current
    id:  auto_dcl_moving_average
    unit_of_measurement: A
    device_class: current
    internal: true  
    filters:    
    - exponential_moving_average:
        alpha: 0.15
        send_every: 1
        send_first_at: 1
 
  # Third, if the instantaneous initial discharge current value is lower than the moving average, use that, otherwise use the moving average.
  # This means that cell voltage drops will be reacted to quickly, but increased cell voltages will not, preventing oscillation of requested current.
  - platform: copy
    source_id: auto_dcl_initial
    name: ${name} ${yambms_name} Auto Discharge Current
    id: auto_dcl
    unit_of_measurement: A
    device_class: current
    accuracy_decimals: 1                         
    internal: true
    filters:
    - lambda: !lambda |-
              // Variables
              double auto_dcl = round(min(id(auto_dcl_moving_average).state, x) * 10) / 10;
              
              id(${yambms_id}_auto_dcl) = auto_dcl;
              return auto_dcl; 
