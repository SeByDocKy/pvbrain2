# Updated : 2025.07.30
# Version : 1.1.2
# GitHub  : https://github.com/SeByDocKy/pvbrain2

esphome:
  name: ${hostname}
  friendly_name: ${friendly_name}
  # comment: 'Solar system braining and more !'
  # area: 'Technical local'
  project:
    name: Reseautonome.PVbrain2
    version: ${pvbrain2_version}
  min_version: ${esphome_min_version}

time:
  # https://esphome.io/components/time/homeassistant
  # https://esphome.io/components/time/sntp
  - platform: sntp # homeassistant
    id: my_time

button:
  # https://esphome.io/components/button/restart
  - platform: restart
    name: ${name} ESP32 Restart
    entity_category: config

binary_sensor:
  # https://esphome.io/components/binary_sensor/status
  - platform: status
    name: ${name} ESP32 Online Status
    id: esp32_online_status
    entity_category: diagnostic
  # Inverter communication status (CANBUS / RS485)
  - platform: template
    name: ${name} Inverter communication status
    id: inverter_com_status
    entity_category: diagnostic

sensor:
  # https://esphome.io/components/sensor/uptime
  - platform: uptime
    id: esp32_uptime_sec
    update_interval: 10s
    internal: true

  # https://esphome.io/components/sensor/internal_temperature
  - platform: internal_temperature
    name: ${name} ESP32 internal temperature
    id: esp32_internal_temperature
    update_interval: 10s
    entity_category: diagnostic

text_sensor:
  # Uptime Human Readable
  - platform: template
    name: ${name} ESP32 Uptime
    id: esp32_uptime
    update_interval: 10s
    icon: mdi:clock-start
    entity_category: diagnostic
    lambda: |-
      int uptime_sec = id(esp32_uptime_sec).state;
      int days = uptime_sec / 86400;
      int hours = (uptime_sec % 86400) / 3600;
      int minutes = (uptime_sec % 3600) / 60;
      int seconds = uptime_sec % 60;
      return {
        (
          (days ? std::to_string(days) +"d " : "") +
          (hours ? std::to_string(hours) +"h " : "") +
          (minutes ? std::to_string(minutes) +"m " : "") +
          (std::to_string(seconds) +"s")
        ).c_str()
      };

  # Now date and time
  - platform: template
    name: ${name}_esp32_date_time_now
    id: esp32_date_time_now
    update_interval: 10s
    icon: mdi:clock-start
    entity_category: diagnostic
    internal: true
    lambda: return id(my_time).now().strftime("%Y-%m-%d %H:%M:%S");

  # https://esphome.io/components/text_sensor/version
  - platform: version
    name: ${name} ESP32 ESPHome version
    id: esp32_esphome_version
    hide_timestamp: false #true
    entity_category: diagnostic
