globals:
  - id: ${powermeter_name}_energy_yesterday_global
    type: float
    restore_value: yes
    
time:
  - platform: homeassistant #sntp
    id: !extend my_time
    on_time:
      - seconds: ${my_second}
        minutes: ${my_minute}
        hours: ${my_hours}
        then:  
          - globals.set:
              id: ${powermeter_name}_energy_yesterday_global
              value: !lambda return ( id(${powermeter_name}_energy_yesterday_global) =  float( id(${powermeter_name}_energy_today).state) );         
    
button:
  - platform: template
    name: ${name}_${powermeter_name}_reset_energy
    on_press:
      then:
        - pzemac.reset_energy: ${powermeter_name}_id
   
sensor:
  - platform: pzemac
    id: ${powermeter_name}_id
    modbus_id: ${powermeter_modbus_id}
    address: ${powermeter_modbus_address}
    current:
      name: ${name}_${powermeter_name}_current
      accuracy_decimals: 2
    voltage:
      name: ${name}_${powermeter_name}_voltage
      accuracy_decimals: 2
    power:
      name: ${name}_${powermeter_name}_power
      id: ${powermeter_name}_power
      unit_of_measurement: 'W'
      accuracy_decimals: 1
    frequency:
      name: ${name}_${powermeter_name}_frequency
      unit_of_measurement: 'Hz'
      accuracy_decimals: 2
    power_factor:
      name: ${name}_${powermeter_name}_power_factor
      accuracy_decimals: 2
      id: ${powermeter_name}_power_factor
    energy:
      name: ${name}_${powermeter_name}_energy_total
      unit_of_measurement: 'kWh'
      accuracy_decimals: 1
      id: ${powermeter_name}_energy_total
      filters: 
      - multiply: 0.001
    update_interval: ${powermeter_update_interval}
    
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_energy_today
    id: ${powermeter_name}_energy_today
    power_id: ${powermeter_name}_power
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    method: right
    restore: true
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${powermeter_name}_energy_yesterday
    id: ${powermeter_name}_energy_yesterday
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    icon: mdi:counter
    update_interval: ${powermeter_template_update}
    lambda: |-
      return (id(${powermeter_name}_energy_yesterday).state = id(${powermeter_name}_energy_yesterday_global));
    
  - platform: template
    name: ${name}_${powermeter_name}_apparent_power
    id: ${powermeter_name}_apparent_power
    unit_of_measurement: 'VA'
    accuracy_decimals: 1
    update_interval: ${powermeter_template_update}
    icon: mdi:power
    lambda: |-
      if (float(id(${powermeter_name}_power_factor).state) != 0.0){
        return ( (id(${powermeter_name}_power).state/id(${powermeter_name}_power_factor).state));
      }
      else{
        return id(${powermeter_name}_power).state;
      }
    
  - platform: template
    name: ${name}_${powermeter_name}_reactive_power
    id: ${powermeter_name}__reactive_power
    unit_of_measurement: 'var'
    accuracy_decimals: 1
    update_interval: ${powermeter_template_update}
    icon: mdi:power
    lambda: return (  id(${powermeter_name}_apparent_power).state*sin(acos( id(${powermeter_name}_power_factor).state ))  );   