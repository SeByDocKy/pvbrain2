external_components:
#  - source: github://KinDR007/VictronSmartShunt-ESPHOME@main
#    refresh: 0s
  - source: "github://SeByDocKy/myESPhome/"
    components: [victron_smart_shunt]
    refresh: 0s  

victron_smart_shunt:
  - id: ${powermeter_name}_smart_shunt
    uart_id: ${powermeter_uart_id}

globals:    
  - id: ${powermeter_name}_battery_charging_energy_yesterday_global
    type: float
    restore_value: yes
    
  - id: ${powermeter_name}_battery_discharging_energy_yesterday_global
    type: float
    restore_value: yes

time:
  - platform: homeassistant #sntp
    id: !extend my_time
  
    on_time:
      - seconds: ${my_second}
        minutes: ${my_minute}
        hours: ${my_hours}
        then:  
          - globals.set:
              id: ${powermeter_name}_battery_charging_energy_yesterday_global
              value: !lambda return ( id(${powermeter_name}_battery_charging_energy_yesterday_global) =  float( id(${powermeter_name}_battery_charging_energy_today).state) ); 
                
          - globals.set:
              id: ${powermeter_name}_battery_discharging_energy_yesterday_global
              value: !lambda return ( id(${powermeter_name}_battery_discharging_energy_yesterday_global) =  float( id(${powermeter_name}_battery_discharging_energy_today).state) );

sensor:
  - platform: template
    name: ${name}_${powermeter_name}_battery_charging_power
    id: ${powermeter_name}_battery_charging_power
    unit_of_measurement: 'W'
    device_class: 'power'
    accuracy_decimals: 1
    update_interval: ${powermeter_template_update}
    icon: mdi:power
    lambda: |-
      if (float(id(${powermeter_name}_instantaneous_power).state)> 0){
        return ( (id(${powermeter_name}_instantaneous_power).state) );   
      }
      else {
        return 0.0;
      }  
  
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_battery_charging_energy_today
    power_id: ${powermeter_name}_battery_charging_power
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    accuracy_decimals: 1
    id: ${powermeter_name}_battery_charging_energy_today
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${powermeter_name}_battery_charging_energy_yesterday
    id: ${powermeter_name}_battery_charging_energy_yesterday
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      return ( id(${powermeter_name}_battery_charging_energy_yesterday).state = id(${powermeter_name}_battery_charging_energy_yesterday_global) );    
  
  - platform: template
    name: ${name}_${powermeter_name}_battery_discharging_power
    id: ${powermeter_name}_battery_discharging_power
    unit_of_measurement: 'W'
    device_class: 'power'
    accuracy_decimals: 1
    update_interval: ${powermeter_template_update}
    icon: mdi:power
    lambda: |-
      if (float(id(${powermeter_name}_instantaneous_power).state)<= 0){
        return ( - (id(${powermeter_name}_instantaneous_power).state) );   
      }
      else {
        return 0.0;
      }  
  
  - platform: total_daily_energy
    name: ${name}_${powermeter_name}_battery_discharging_energy_today
    power_id: ${powermeter_name}_battery_discharging_power
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    accuracy_decimals: 1
    id: ${powermeter_name}_battery_discharging_energy_today
    method: trapezoid
    filters:
       # Multiplication factor from W to kW is 0.001
       - multiply: 0.001
    icon: mdi:counter
    
  - platform: template
    name: ${name}_${powermeter_name}_battery_discharging_energy_yesterday
    id: ${powermeter_name}_battery_discharging_energy_yesterday
    unit_of_measurement: 'kWh'
    device_class: 'energy'
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: ${powermeter_template_update}
    lambda: |-
      return ( id(${powermeter_name}_battery_discharging_energy_yesterday).state = id(${powermeter_name}_battery_discharging_energy_yesterday_global) );    
  

  - platform: victron_smart_shunt
    victron_smart_shunt_id: ${powermeter_name}_smart_shunt
#    id: ${powermeter_name}
    battery_voltage:
      name: ${name}_${powermeter_name}_battery_voltage
      id: ${powermeter_name}_battery_voltage
      accuracy_decimals: 2

    battery_current:
      name: ${name}_${powermeter_name}_battery_current
      id: ${powermeter_name}_battery_current
      accuracy_decimals: 2

    # fw_version:
      # name: ${name}_${powermeter_name}_fw_version
      # id: ${powermeter_name}_fw_version

    # pid:
      # name: ${name}_${powermeter_name}_pid
      # id: ${powermeter_name}_pid

    instantaneous_power:
      name: ${name}_${powermeter_name}_battery_power
      id: ${powermeter_name}_instantaneous_power
      accuracy_decimals: 2

    time_to_go:
      name: ${name}_${powermeter_name}_time_to_go
      id: ${powermeter_name}_time_to_go

    consumed_amp_hours:
      name: ${name}_${powermeter_name}_consumed_amp_hours
      id: ${powermeter_name}_consumed_amp_hours
      unit_of_measurement: 'Ah'
      device_class: 'energy'
      accuracy_decimals: 1

    min_battery_voltage:
      name: ${name}_${powermeter_name}_min_battery_voltage
      id: ${powermeter_name}_min_battery_voltage
      accuracy_decimals: 2

    max_battery_voltage:
      name: ${name}_${powermeter_name}_max_battery_voltage
      id: ${powermeter_name}_max_battery_voltage
      accuracy_decimals: 2

    amount_of_charged:
      name: ${name}_${powermeter_name}_amount_of_charged
      id: ${powermeter_name}_amount_of_charged
      filters:
        - multiply: 0.001
      unit_of_measurement: 'kWh'
      device_class: 'energy'
      accuracy_decimals: 1

    # bmv_alarm_text:
      # name: ${name}_${powermeter_name}_bmv_alarm
      # id: ${powermeter_name}_bmv_alarm

    # bmv_text:
      # name: ${name}_${powermeter_name}_bmv_text
      # id: ${powermeter_name}_bmv_text

    last_full_charge:
      name: ${name}_${powermeter_name}_last_full_charge
      id: ${powermeter_name}_last_full_charge

    deepest_discharge:
      name: ${name}_${powermeter_name}_deepest_discharge
      id: ${powermeter_name}_deepest_discharge
      unit_of_measurement: 'Ah'
      device_class: 'energy_storage'
      accuracy_decimals: 1

    last_discharge:
      name: ${name}_${powermeter_name}_last_discharge
      id: ${powermeter_name}_last_discharge
      unit_of_measurement: 'Ah'
      device_class: 'energy_storage'
      accuracy_decimals: 1

    discharged_energy:
      name: ${name}_${powermeter_name}_discharged_energy
      id: ${powermeter_name}_discharged_energy
      filters:
        - multiply: 0.001
      unit_of_measurement: 'kWh'
      device_class: 'energy_storage'
      accuracy_decimals: 1

    state_of_charge:
      name: ${name}_${powermeter_name}_soc
      id: ${powermeter_name}_soc
      