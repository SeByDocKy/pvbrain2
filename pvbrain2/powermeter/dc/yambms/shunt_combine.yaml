# Updated : 2025.01.16
# Version : 1.5.3
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

globals:
  - id: shunt${shunt_id}_combined
    type: bool
    restore_value: no
    initial_value: "false"

# Combine once without conditions
esphome:
  on_boot:
    then:
      # Shunt counter (total)
      - lambda: id(${yambms_id}_var_shunt_counter) += 1;

switch:
  # Combine enable/disable Switch
  - platform: template
    name: "${name} ${shunt_name} Combine enabled"
    id: shunt${shunt_id}_switch_combine
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true

binary_sensor:
  # Indicates whether the Shunt can be combined
  - platform: template
    name: "${name} ${shunt_name} Can be combined"
    id: shunt${shunt_id}_can_be_combined
    lambda: return (id(shunt${shunt_id}_switch_combine).state && id(shunt${shunt_id}_online_status).state);

interval:
  - interval: ${shunt_combine_interval}
    then:
      - lambda: |-
          // Shunt number to combine ?
          if (id(${yambms_id}_var_to_combine_shunt_number) == ${shunt_id})
          {
            // The Shunt can be combined ?
            if (id(shunt${shunt_id}_can_be_combined).state)
            {
              // +-----------------------------------------------+
              // | Combine not continuously                      |
              // +-----------------------------------------------+

              if (id(shunt${shunt_id}_combined) == false)
              {
                // To combine shunt counter
                id(${yambms_id}_var_to_combine_shunt_counter) += 1;

                // Shunt use (replace BMS infos)
                id(${yambms_id}_var_shunt_use) = true;

                // Combined
                id(shunt${shunt_id}_combined) = true;
              }

              // +-----------------------------------------------+
              // | Combine continuously                          |
              // +-----------------------------------------------+

              // TOTAL voltage
              id(${yambms_id}_var_shunt_total_voltage) += id(shunt${shunt_id}_voltage).state;
              // TOTAL current
              id(${yambms_id}_var_shunt_total_current) += id(shunt${shunt_id}_current).state;
              // TOTAL power
              id(${yambms_id}_var_shunt_total_power) += id(shunt${shunt_id}_power).state;
              // TOTAL soc
              id(${yambms_id}_var_shunt_total_soc) += id(shunt${shunt_id}_soc).state;

            }

            // +-----------------------------------------------+
            // | Uncombine not continuously                    |
            // +-----------------------------------------------+
            else if (id(shunt${shunt_id}_combined) == true)
            {
              // To combine shunt counter
              id(${yambms_id}_var_to_combine_shunt_counter) -= 1;

              // Shunt use (replace BMS infos)
              if (id(${yambms_id}_var_to_combine_shunt_counter) == 0) id(${yambms_id}_var_shunt_use) = false;
              
              // Uncombined
              id(shunt${shunt_id}_combined) = false;
            }

            // Increment the counter for next Shunt processing
            id(${yambms_id}_var_to_combine_shunt_number)++;
          }